{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "  title: \"Getting Started with Git and GitHub\"\n",
        "  subtitle: \"Introduction\"\n",
        "  author:\n",
        "  - name: Shelby Golden\n",
        "    degrees: M.S.\n",
        "    email: shelby.golden@yale.edu\n",
        "    icon: calendar3\n",
        "    affiliations:\n",
        "      - ref: ysph\n",
        "  affiliations:\n",
        "    - id: ysph\n",
        "      name: Yale School of Public Health Data Science and Data Equity (DSDE)\n",
        "      department: Biostatistics\n",
        "      city: New Haven\n",
        "      state: CT\n",
        "  date: 03/27/2025\n",
        "  date-format: long\n",
        "  markdown: \n",
        "  editor_options: \n",
        "  chunk_output_type: console\n",
        "  toc: true\n",
        "  toc-depth: 3\n",
        "  highlight-style: github\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## Introduction\n",
        "\n",
        "In this workshop we delve deeper into the domain specific language of statistical graphics that underpins the `tidyverse` `ggplot2` package syntax: the \"Grammar of Graphics\". We will explore each discrete grammar layer using laboratory-confirmed RSV hospitalizations data collected by the CDC's Respiratory Virus Hospitalization Surveillance Network (RESP-NET) surveillance program.\n",
        "\n",
        "With a better understanding of the syntax fundamentals, we will then get introduced to some advanced uses of `ggplot2` that are commonly used in public health:\n",
        "\n",
        "-   Making plots interactive with `plotly`\n",
        "-   Projecting data to a map\n",
        "\n",
        "We will close the workshop by asking [Yale's Clarity Platform](https://ai.yale.edu/yales-ai-tools-and-resources/clarity-platform) to reproduce our code from the plot image alone to exhibit how AI can be used to support data visualization work. Clarity is an AI chatbot that offers similar functions to OpenAIâ€™s ChatGPT and Microsoft Copilot with additional data protection. Find out more about [Clarity's security](https://ai.yale.edu/yales-ai-tools-and-resources/clarity-platform/clarity-platform-security?check_logged_in=1) guidelines on \"AI at Yale\".\n",
        "\n",
        "The cleaned and harmonized version of the RSV-NET dataset was compiled as part of the YSPH's very own PopHIVE project. Special thanks to [Professor Daniel Weinberger](https://ysph.yale.edu/profile/daniel-weinberger/) for allow us to adopt his plot code in this workshop.\n",
        "\n",
        "\n",
        "\n",
        "## Accessing the Materials\n",
        "\n",
        "### Slides, Handouts, and Other Materials\n",
        "\n",
        "Download the complete slide deck with annotations and the in-person workshop handout. Comments were saved in the bottom left of each slide, and references for this webpage are in its **Appendix**.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "{{< downloadthis \"Workshop Slide Deck with Comments.pdf\" label=\"Complete Slide Deck\" id=download_btn >}}\n",
        "\n",
        "\n",
        "{{< downloadthis \"Handout.pdf\" label=\"Handout\" id=download_btn >}}\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "### Codespaces\n",
        "\n",
        "In this workshop you will need to access the R code we have prepared for the worked through example and challenge questions. If you have not already, you will need to download [R](https://cran.r-project.org/) to your local device, and we suggest using the integrated development environment (IDE) software [RStudio](https://posit.co/download/rstudio-desktop/). \n",
        "\n",
        "::: {.callout-important collapse=\"true\"}\n",
        "This workshop was generated using R (v 4.4.3) in the RStudio IDE (v 2024.12.1+563). `renv` is included to reproduce the same coding enviroment, storing all the relevant packages and package versions needed in the code. If you experience trouble running the scripts, you might want to check that the environment was initialized and that you are using the same version of R and RStudio.\n",
        ":::\n",
        "\n",
        "Two GitHub repositories have been created to practice using Git and GitHub:\n",
        "\n",
        "-  Solo projects: [ysph-dsde/JHU-CRC-Vaccinations](https://github.com/ysph-dsde/JHU-CRC-Vaccinations)\n",
        "-  Group projects: [ysph-dsde/JHU-CRC-Cases-and-Deaths](https://github.com/ysph-dsde/JHU-CRC-Cases-and-Deaths)\n",
        "\n",
        "In order to practice your skills with Git and GitHub using our codespaces, you will need to create a \"clean-break\" copy of both repositories. This will fully decouple the codespace connections from the ysph-dsde GitHub accout, and allow you full access to its contents. There are two methods to do this: by the \"GitHub Importer\" tool or your command-line application (i.e. Terminal for Macs and Windows Terminal for windows).\n",
        "\n",
        "Below we have detailed how you can create a \"clean-break\" by both methods. We suggest you attempt the \"GitHub Importer\" tool option first, and if that fails to follow the command-line steps. Please note that the importer tool will sometimes take a few minutes to fully transfer over the files.\n",
        "\n",
        "\n",
        "### Making a Clean-Break Copy\n",
        "\n",
        "#### METHOD 1: Copying Using GitHub Importer\n",
        "\n",
        "::: {.callout-note}\n",
        "This method is not a Fork. You can learn more about GitHub Importer [here](https://docs.github.com/en/migrations/importing-source-code/using-github-importer/importing-a-repository-with-github-importer).\n",
        ":::\n",
        "\n",
        "1. [Log in](https://github.com/login) to your personal GitHub account.\n",
        "\n",
        "2. In the top-right of the page navigation bar, select the [ {{< iconify octicon:plus-16 >}} {{< iconify octicon:triangle-down-24 >}} ]{style=\"background-color: #010409; color: #b8bbbf; border: 1px solid #9198a1; padding: 3px; padding-left: 5px; padding-right: 5px; border-radius: 5px;\"} dropdown menu and click [ {{< iconify octicon:repo-push-24 >}} Import repository]{style=\"background-color: #010409; color: #b8bbbf; border: 1px solid #9198a1; padding: 3px; padding-left: 7px; padding-right: 7px; border-radius: 5px;\"}.\n",
        "\n",
        "\n",
        "2. Fill out the following sections:\n",
        "\n",
        "    a. **Your source repository details:** Paste the https URL of the repositories listed above. No credentials are required for this action.\n",
        "\n",
        "    b. **Your new repository details:** Adjust the GitHub account owner as needed and create the name for the new repository. It is good practice to initially set the repository to \"Private\".\n",
        "\n",
        "3. Click the [ Begin import ]{style=\"background-color: #1f6feb; color: #ffffff; border: 1px solid #0d1117; padding: 3px; padding-left: 7px; padding-right: 7px; border-radius: 5px;\"} button to copy the codespace.\n",
        "\n",
        "#### METHOD 2: Copying Using Terminal\n",
        "\n",
        "These directions follow GitHub's [duplicating a repository](https://docs.github.com/en/repositories/creating-and-managing-repositories/duplicating-a-repository) page.\n",
        "\n",
        "1. [Log in](https://github.com/login) to your personal GitHub account.\n",
        "\n",
        "2. In the top-right of the page navigation bar, select the [ {{< iconify octicon:plus-16 >}} {{< iconify octicon:triangle-down-24 >}} ]{style=\"background-color: #010409; color: #b8bbbf; border: 1px solid #9198a1; padding: 3px; padding-left: 5px; padding-right: 5px; border-radius: 5px;\"} dropdown menu and click [ {{< iconify octicon:repo-24 >}} New repository]{style=\"background-color: #010409; color: #b8bbbf; border: 1px solid #9198a1; padding: 3px; padding-left: 7px; padding-right: 7px; border-radius: 5px;\"}.\n",
        "\n",
        "3. Fill out the following sections:\n",
        "\n",
        "    a. Adjust the GitHub account owner as needed and create the name for the new repository. \n",
        "    \n",
        "    b. OPTIONAL: Add a short description.\n",
        "    \n",
        "    c. It is good practice to initially set the repository to \"Private\".\n",
        "    \n",
        "    d. Do not use a template or include a description, README file, .gitignore, or license.\n",
        "   \n",
        "2. Open the command-line application (i.e. Terminal for Macs and Windows Terminal for windows) and navigate into the project directory.\n",
        "\n",
        "3. Navigate to the file location you want to store the repository copy.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "   ```{bash}\n",
        "   #| echo: true\n",
        "   #| eval: false\n",
        "   cd \"/file_location/\"\n",
        "   ```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "asd\n",
        "4. Clone a bare copy of the repository.\n",
        "   ```\n",
        "   # using SSH\n",
        "   git clone --bare git@github.com:ysph-dsde/JHU-CRC-Vaccinations.git\n",
        "   \n",
        "   # or using HTTPS\n",
        "   git clone --bare https://github.com/ysph-dsde/JHU-CRC-Vaccinations.git\n",
        "   ```\n",
        "   \n",
        "5. Open the project file.\n",
        "   ```\n",
        "   cd \"JHU-CRC-Vaccinations.git\"\n",
        "   ```\n",
        "   \n",
        "6. Push a mirror of the cloned Git file to your newly created GitHub repository.\n",
        "   ```\n",
        "   # using SSH\n",
        "   git push --mirror git@github.com:EXAMPLE-USER/NEW-REPOSITORY.git\n",
        "\n",
        "   # or using HTTPS\n",
        "   git push --mirror https://github.com/EXAMPLE-USER/NEW-REPOSITORY.git\n",
        "   ```\n",
        "\n",
        "7. Delete the bare cloned file used to create a new remote repository.\n",
        "   ```\n",
        "   cd ..                                    # Go back one file location\n",
        "   rm -rf JHU-CRC-Vaccinations.git          # Delete the bare clone\n",
        "   ```\n",
        "8. Proceed with cloning the newly copied repository.\n",
        "\n",
        "### Cloning the Copied Repository\n",
        "\n",
        "Now that you have copied this repository into your own GitHub, you are ready to proceed with a standard clone to your local device.\n",
        "  \n",
        "1. Open Terminal.\n",
        "\n",
        "2. Navigate to the file location you want to store the repository copy.\n",
        "   ```\n",
        "   cd \"/file_location/\"\n",
        "   ```\n",
        "3. Clone the newly created GitHub repository.\n",
        "   ```\n",
        "   # using SSH\n",
        "   git clone git@github.com:EXAMPLE-USER/NEW-REPOSITORY.git\n",
        "\n",
        "   # or using HTTPS\n",
        "   git clone https://github.com/EXAMPLE-USER/NEW-REPOSITORY.git\n",
        "   ```\n",
        "\n",
        "4. **OPTIONAL:** You can reset the repository history, which will clear the previous commits, by running the following block of code (Source: [StackExchange by Zeelot](https://stackoverflow.com/questions/9683279/make-the-current-commit-the-only-initial-commit-in-a-git-repository)).\n",
        "    ```\n",
        "    git checkout --orphan tempBranch         # Create a temporary branch\n",
        "    git add -A                               # Add all files and commit them\n",
        "    git commit -m \"Reset the repo\"\n",
        "    git branch -D main                       # Deletes the main branch\n",
        "    git branch -m main                       # Rename the current branch to main\n",
        "    git push -f origin main                  # Force push main branch to GitHub\n",
        "    git gc --aggressive --prune=all          # Remove the old files\n",
        "    ```\n",
        "\n",
        "### Initializing the Environment\n",
        "\n",
        "1. Open the newly cloned file.\n",
        "2. Launch the project by opening `JHU-CRC-Vaccinations.Rproj`.\n",
        "3. Open `Analysis Script_Vaccinations Time-Series Plot.R`.\n",
        "4. In the R console, activate the enviroment by runing:\n",
        "    ```\n",
        "    renv::restore()\n",
        "    ```\n",
        "\n",
        "\n",
        "1.  Move the unzipped directory to the file location you wish to house the project.\n",
        "\n",
        "2.  Open `Data-Visualization-with-ggplot2.Rproj`.\n",
        "\n",
        "3.  Open `Discussion and Challenge Questions.R`.\n",
        "\n",
        "4.  Initialize the environment in the R console by running:\n",
        "\n",
        "    ```         \n",
        "    renv::init()               # initialize the project\n",
        "    renv::restore()            # download packages and their version saved in the lockfile.\n",
        "    ```\n",
        "\n",
        "**NOTE:** If you are asked to update packages, say no. The `renv()` is intended to recreate the same environment under which the project was created, making it reproducible. You are ready to proceed when running `renv::restore()` gives the output:\n",
        "\n",
        "```         \n",
        "- The library is already synchronized with the lockfile.\n",
        "```\n",
        "\n",
        "You can read more about `renv()` in their [vignette](https://rstudio.github.io/renv/articles/renv.html)."
      ],
      "id": "a3047910"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}